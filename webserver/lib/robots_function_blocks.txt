(*
 * This is my custom blocks implementation
 *
 *
 * Test Block
 * -----------
 *)
(* This block should get an integer at I0, sum
   10 to it and then output the sum at OUT
*)

FUNCTION_BLOCK ROBOTENABLE
  VAR_INPUT
    ENABLE : BOOL := False;
    STATE : SINT := 0;
  END_VAR
  VAR_OUTPUT
    VALID : BOOL := False;
  END_VAR

  {{
    bool enable = GetFbVar(ENABLE);
    int state = GetFbVar(STATE);
    SetFbVar(VALID, false);
    int fd = open("/tmp/RobotEnable.pipe",O_RDWR | O_NONBLOCK);
    if(enable && state < 2){
      if(fd > 0){
        char buf[20] = {"RobotEnable;1;"};
        write(fd, buf, 20);
      }
    }
    else if(!enable && state >= 2){
      if(fd > 0){
        char buf[20] = {"RobotEnable;0;"};
        write(fd, buf, 20);
      }
    }
    char buf[1];
    int ret = read(fd, buf, 1);
    if (ret > 0 && buf[0] == '1'){
      SetFbVar(VALID,true);
    }
    close(fd);
  }}
END_FUNCTION_BLOCK

FUNCTION_BLOCK MOTIONGO
  VAR_INPUT
    ENABLE : BOOL := False;
  END_VAR
  VAR_OUTPUT
    VALID : BOOL := False;
  END_VAR

  {{
    bool enable = GetFbVar(ENABLE);
    SetFbVar(VALID, false);
    int fd = open("/tmp/MotionGo.pipe",O_RDWR | O_NONBLOCK);
    if(enable){
      if(fd > 0){
        char buf[10] = {"MotionGo;"};
        write(fd, buf, 10);
      }
    }
    
    char buf[1];
    int ret = read(fd, buf, 1);
    if (buf[0] == '1'){
      SetFbVar(VALID,true);
    }
    close(fd);
  }}
END_FUNCTION_BLOCK

FUNCTION_BLOCK GETCURJOINT
  VAR_INPUT
    ENABLE : BOOL := false;
  END_VAR
  VAR_OUTPUT
    VALID : BOOL := false;
    ERROR : BOOL := false;
    ERRORCODE : SINT := 0;
    JOINT : STRING := '0,0,0,0,0,0';
    EXTJOINT : STRING := '0,0,0,0,0,0';
  END_VAR

  {{
    SetFbVar(VALID, false);
    SetFbVar(ERROR, false);
    SetFbVar(ERRORCODE, false);
    
    bool enable = GetFbVar(ENABLE);
    int fd = open("/tmp/GetCurJoint.pipe",O_RDWR | O_NONBLOCK);
    if(enable){
      if(fd > 0){
        char buf[20] = {"GetCurJoint;"};
        write(fd, buf, 20);
      }
    }
    char buf[200];
    int ret = read(fd, buf, 200);
    if(ret>0){
      if(buf[0]=='n'){
        //ERROR
        SetFbVar(ERROR, true);
        //1-digit error id
        SetFbVar(ERRORCODE, buf[1] - 48);
      }
      else if(buf[0] == 'y'){
        //Set Result
        SetFbVar(VALID, true);
        char *p1, *p2;
        
        //Get joint          
        p1 = strchr(buf, ';');
        char word[100] = {};
        strncpy(word, buf + 1, p1 - buf - 1);
        char *p_word = word;
        //Set result
        IEC_STRING joint_str = {strlen(word), ""};
        strcpy(joint_str.body, p_word);
        SetFbVar(JOINT, joint_str);
        
        //Get extjoint
        p2 = strchr(p1 + 1, ';');
        memset(word, 0, sizeof(word));
        strncpy(word, p1 +  1, p2 - p1 - 1);
        p_word = word;
        //Set result
        IEC_STRING extjoint_str = {strlen(word), ""};
        strcpy(extjoint_str.body, p_word);
        SetFbVar(EXTJOINT, extjoint_str);
      }
    }
    close(fd);

  }}
END_FUNCTION_BLOCK

FUNCTION_BLOCK GETCURSTATE
  VAR_INPUT
    ENABLE : BOOL := false;
  END_VAR
  VAR_OUTPUT
    STATE : SINT := 0;
  END_VAR
  {{
    bool enable = GetFbVar(ENABLE);
    int fd = open("/tmp/GetCurState.pipe",O_RDWR | O_NONBLOCK);
    if(enable){
      if(fd > 0){
        char buf[20] = {"GetCurState;"};
        write(fd, buf, 20);
      }
    }
    
    char buf[1];
    int ret = read(fd, buf, 1);
    if(ret > 0){
      int res =  buf[0] - 48;
      if(0 <= res && res <= 5){
        SetFbVar(STATE,res);
      }
    }
    close(fd);

  }}
END_FUNCTION_BLOCK

FUNCTION_BLOCK ERRORRECOVER
  VAR_INPUT
    ENABLE : BOOL := false;
  END_VAR

  {{
    bool enable = GetFbVar(ENABLE);
    int fd = open("/tmp/ErrorRecover.pipe",O_RDWR | O_NONBLOCK);
    if(enable){
      if(fd > 0){
      char buf[20] = {"ErrorRecover;"};
      char word[10] = {0};
      int ret = write(fd, buf, 20);   
      }
    }
    close(fd);

  }}
END_FUNCTION_BLOCK

FUNCTION_BLOCK MOVEABSJOINT
  VAR_INPUT
    ENABLE : BOOL := false;
    JOINT : STRING := '0,0,0,0,0,0';
    EXTJOINT : STRING := '0,0,0,0,0,0';
    LOAD : STRING := '0,0,0,0,0,0,0,0,0,0';
    SPEED : REAL := 1.0;
    ZONE : REAL := 0.0;
  END_VAR
  VAR_OUTPUT
    VALID : BOOL := false;
    ERROR : BOOL := false;
    ERRORCODE : SINT := 0;
  END_VAR
  VAR
    WAIT : SINT := 0;
  END_VAR

  {{
    int wait = GetFbVar(WAIT);
    bool enable = GetFbVar(ENABLE);
    int fd = open("/tmp/MoveAbsJoint.pipe",O_RDWR | O_NONBLOCK);
    if(wait==0 && enable){
      SetFbVar(WAIT, 1);
    }
    else if(wait == 1){
      char buf[400] = {"MoveAbsJoint;"};
      //JOINT
      char *word = GetFbVar(JOINT).body;
      strcat(buf,word);
      strcat(buf,";");
      //EXTJOINT
      word = GetFbVar(EXTJOINT).body;
      strcat(buf,word);
      strcat(buf,";");
      //LOAD
      word = GetFbVar(LOAD).body;
      strcat(buf,word);
      strcat(buf,";");
      //SPEED
      float speed = GetFbVar(SPEED);
      sprintf(word, "%.2lf", speed);
      strcat(buf,word);
      strcat(buf,";");
      //ZONE
      float zone = GetFbVar(ZONE);
      sprintf(word, "%.2lf", zone);
      strcat(buf,word);
      strcat(buf,";");
      
      int ret = write(fd, buf, 400);
      if(ret > 0){
        SetFbVar(WAIT, 2);
      }
    }
    else if(wait == 2){
      char buf[400];
      int ret = read(fd, buf, 400);
      if(ret>0){
        if(buf[0]=='n'){
          //ERROR
          SetFbVar(ERROR, true);
          //1-digit error id
          SetFbVar(ERRORCODE, buf[1] - 48);
        }
        else if(buf[0] == 'y'){
          SetFbVar(VALID, true);
        }
        SetFbVar(WAIT, 3);
      }
    }
    else if((wait == 3) && !enable){
      
      SetFbVar(VALID, false);
      SetFbVar(ERROR, false);
      SetFbVar(ERRORCODE, 0);
      SetFbVar(WAIT, 0);
    }
    close(fd);
  }}
END_FUNCTION_BLOCK

FUNCTION_BLOCK MOVEJOINT
  VAR_INPUT
    ENABLE : BOOL := false;
    TOPOINT : STRING := '0,0,0,0,0,0';
    EXTJOINT : STRING := '0,0,0,0,0,0';
    LOAD : STRING := '0,0,0,0,0,0';
    SPEED : REAL := 1.0;
    ZONE : REAL := 0.0;
  END_VAR
  VAR_OUTPUT
    VALID : BOOL := false;
    ERROR : BOOL := false;
    ERRORCODE : SINT := 0;
  END_VAR
  VAR
    WAIT : SINT := 0;
  END_VAR

  {{
    int wait = GetFbVar(WAIT);
    bool enable = GetFbVar(ENABLE);
    int fd = open("/tmp/MoveJoint.pipe",O_RDWR | O_NONBLOCK);
    if(wait==0 && enable){
      SetFbVar(WAIT, 1);
    }
    else if(wait == 1){
      char buf[400] = {"MoveJoint;"};
      //TOPOINT
      char *word = GetFbVar(TOPOINT).body;
      strcat(buf,word);
      strcat(buf,";");
      //EXTJOINT
      word = GetFbVar(EXTJOINT).body;
      strcat(buf,word);
      strcat(buf,";");
      //LOAD
      word = GetFbVar(LOAD).body;
      strcat(buf,word);
      strcat(buf,";");
      //SPEED
      float speed = GetFbVar(SPEED);
      sprintf(word, "%.2lf", speed);
      strcat(buf,word);
      strcat(buf,";");
      //ZONE
      float zone = GetFbVar(ZONE);
      sprintf(word, "%.2lf", zone);
      strcat(buf,word);
      strcat(buf,";");
      
      int ret = write(fd, buf, 400);
      if(ret > 0){
        SetFbVar(WAIT, 2);
      }
    }
    else if(wait == 2){
      char buf[400];
      int ret = read(fd, buf, 400);
      if(ret>0){
        if(buf[0]=='n'){
          //ERROR
          SetFbVar(ERROR, true);
          //1-digit error id
          SetFbVar(ERRORCODE, buf[1] - 48);
        }
        else if(buf[0] == 'y'){
          SetFbVar(VALID, true);
        }
        SetFbVar(WAIT, 3);
      }
    }
    else if((wait == 3) && !enable){
      
      SetFbVar(VALID, false);
      SetFbVar(ERROR, false);
      SetFbVar(ERRORCODE, 0);
      SetFbVar(WAIT, 0);
    }
    close(fd);
  }}
END_FUNCTION_BLOCK

FUNCTION_BLOCK MOVELINEAR
  VAR_INPUT
    ENABLE : BOOL := false;
    TOPOINT : STRING := '0,0,0,0,0,0';
    EXTJOINT : STRING := '0,0,0,0,0,0';
    LOAD : STRING := '0,0,0,0,0,0';
    SPEED : REAL := 1.0;
    ZONE : REAL := 0.0;
  END_VAR
  VAR_OUTPUT
    VALID : BOOL := false;
    ERROR : BOOL := false;
    ERRORCODE : SINT := 0;
  END_VAR
  VAR
    WAIT : SINT := 0;
  END_VAR

  {{
    int wait = GetFbVar(WAIT);
    bool enable = GetFbVar(ENABLE);
    int fd = open("/tmp/MoveLinear.pipe",O_RDWR | O_NONBLOCK);
    if(wait==0 && enable){
      SetFbVar(WAIT, 1);
    }
    else if(wait == 1){
      char buf[400] = {"MoveLinear;"};
      //TOPOINT
      char *word = GetFbVar(TOPOINT).body;
      strcat(buf,word);
      strcat(buf,";");
      //EXTJOINT
      word = GetFbVar(EXTJOINT).body;
      strcat(buf,word);
      strcat(buf,";");
      //LOAD
      word = GetFbVar(LOAD).body;
      strcat(buf,word);
      strcat(buf,";");
      //SPEED
      float speed = GetFbVar(SPEED);
      sprintf(word, "%.2lf", speed);
      strcat(buf,word);
      strcat(buf,";");
      //ZONE
      float zone = GetFbVar(ZONE);
      sprintf(word, "%.2lf", zone);
      strcat(buf,word);
      strcat(buf,";");
      
      int ret = write(fd, buf, 400);
      if(ret > 0){
        SetFbVar(WAIT, 2);
      }
    }
    else if(wait == 2){
      char buf[400];
      int ret = read(fd, buf, 400);
      if(ret>0){
        if(buf[0]=='n'){
          //ERROR
          SetFbVar(ERROR, true);
          //1-digit error id
          SetFbVar(ERRORCODE, buf[1] - 48);
        }
        else if(buf[0] == 'y'){
          SetFbVar(VALID, true);
        }
        SetFbVar(WAIT, 3);
      }
    }
    else if((wait == 3) && !enable){
      
      SetFbVar(VALID, false);
      SetFbVar(ERROR, false);
      SetFbVar(ERRORCODE, 0);
      SetFbVar(WAIT, 0);
    }
    close(fd);
  }}
END_FUNCTION_BLOCK

FUNCTION_BLOCK MOVECIRCLE
  VAR_INPUT
    ENABLE : BOOL := false;
    TOPOINT : STRING := '0,0,0,0,0,0';
    EXTJOINT : STRING := '0,0,0,0,0,0';
    VIAPOINT : STRING := '0,0,0,0,0,0';
    VIAEXTJOINT : STRING := '0,0,0,0,0,0';
    LOAD : STRING := '0,0,0,0,0,0';
    SPEED : REAL := 1.0;
    ZONE : REAL := 0.0;
  END_VAR
  VAR_OUTPUT
    VALID : BOOL := false;
    ERROR : BOOL := false;
    ERRORCODE : SINT := 0;
  END_VAR
  VAR
    WAIT : SINT := 0;
  END_VAR

  {{
    int wait = GetFbVar(WAIT);
    bool enable = GetFbVar(ENABLE);
    int fd = open("/tmp/MoveCircle.pipe",O_RDWR | O_NONBLOCK);
    if(wait==0 && enable){
      SetFbVar(WAIT, 1);
    }
    else if(wait == 1){
      char buf[500] = {"MoveCircle;"};
      //POINT
      char *word = GetFbVar(TOPOINT).body;
      strcat(buf,word);
      strcat(buf,";");
      //EXTJOINT
      word = GetFbVar(EXTJOINT).body;
      strcat(buf,word);
      strcat(buf,";");
      //VIAPOINT
      word = GetFbVar(VIAPOINT).body;
      strcat(buf,word);
      strcat(buf,";");
      //VIAEXTJOINT
      word = GetFbVar(VIAEXTJOINT).body;
      strcat(buf,word);
      strcat(buf,";");
      //LOAD
      word = GetFbVar(LOAD).body;
      strcat(buf,word);
      strcat(buf,";");
      //SPEED
      float speed = GetFbVar(SPEED);
      sprintf(word, "%.2lf", speed);
      strcat(buf,word);
      strcat(buf,";");
      //ZONE
      float zone = GetFbVar(ZONE);
      sprintf(word, "%.2lf", zone);
      strcat(buf,word);
      strcat(buf,";");
      
      int ret = write(fd, buf, 500);
      if(ret > 0){
        SetFbVar(WAIT, 2);
      }
    }
    else if(wait == 2){
      char buf[500];
      int ret = read(fd, buf, 500);
      if(ret>0){
        if(buf[0]=='n'){
          //ERROR
          SetFbVar(ERROR, true);
          //1-digit error id
          SetFbVar(ERRORCODE, buf[1] - 48);
        }
        else if(buf[0] == 'y'){
          SetFbVar(VALID, true);
        }
        SetFbVar(WAIT, 3);
      }
    }
    else if((wait == 3) && !enable){
      
      SetFbVar(VALID, false);
      SetFbVar(ERROR, false);
      SetFbVar(ERRORCODE, 0);
      SetFbVar(WAIT, 0);
    }
    close(fd);
  }}
END_FUNCTION_BLOCK

FUNCTION_BLOCK MOVEJOGJOINT
  VAR_INPUT
    ENABLE : BOOL := false;
    INDEX : SINT := 0;
    LOAD : STRING := '0,0,0,0,0,0';
    SPEED : REAL := 1.0;
  END_VAR

  {{
    bool enable = GetFbVar(ENABLE);
    int fd = open("/tmp/MoveJogJoint.pipe",O_RDWR | O_NONBLOCK);
    if(enable){
      if(fd > 0){
      char buf[200] = {"MoveJogJoint;"};
      char word[10] = {0};
      
      //INDEX
      int index = GetFbVar(INDEX);
      sprintf(word, "%d", index);
      strcat(buf,word);
      strcat(buf,";");
      
      //LOAD
      char *p = GetFbVar(LOAD).body;
      strcat(buf,p);
      strcat(buf,";");
      
      //SPEED
      float speed = GetFbVar(SPEED);
      sprintf(word, "%.2lf", speed);
      strcat(buf,word);
      strcat(buf,";");
      int ret = write(fd, buf, 200);   
      }
    }
    close(fd);

  }}
END_FUNCTION_BLOCK

FUNCTION_BLOCK MOVEJOGLINEAR
  VAR_INPUT
    ENABLE : BOOL := false;
    JOGTYPE : SINT := 0;
    LOAD : STRING := '0,0,0,0,0,0';
    SPEED : REAL := 1.0;
  END_VAR

  {{
    bool enable = GetFbVar(ENABLE);
    int fd = open("/tmp/MoveJogLinear.pipe",O_RDWR | O_NONBLOCK);
    if(enable){
      if(fd > 0){
      char buf[200] = {"MoveJogLinear;"};
      char word[10] = {0};

      //TYPE
      int jogtype = GetFbVar(JOGTYPE);
      sprintf(word, "%d", jogtype);
      strcat(buf,word);
      strcat(buf,";");
      
      //LOAD
      char *p = GetFbVar(LOAD).body;
      strcat(buf,p);
      strcat(buf,";");
      
      //SPEED
      float speed = GetFbVar(SPEED);
      sprintf(word, "%.2lf", speed);
      strcat(buf,word);
      strcat(buf,";");
      int ret = write(fd, buf, 200);   
      }
    }
    close(fd);

  }}
END_FUNCTION_BLOCK

FUNCTION_BLOCK MOVEJOGROTATION
  VAR_INPUT
    ENABLE : BOOL := false;
    JOGTYPE : SINT := 0;
    LOAD : STRING := '0,0,0,0,0,0';
    SPEED : REAL := 1.0;
  END_VAR

  {{
    bool enable = GetFbVar(ENABLE);
    int fd = open("/tmp/MoveJogRotation.pipe",O_RDWR | O_NONBLOCK);
    if(enable){
      if(fd > 0){
      char buf[200] = {"MoveJogRotation;"};
      char word[10] = {0};
      
      //TYPE
      int jogtype = GetFbVar(JOGTYPE);
      sprintf(word, "%d", jogtype);
      strcat(buf,word);
      strcat(buf,";");
      
      //LOAD
      char *p = GetFbVar(LOAD).body;
      strcat(buf,p);
      strcat(buf,";");
      
      //SPEED
      float speed = GetFbVar(SPEED);
      sprintf(word, "%.2lf", speed);
      strcat(buf,word);
      strcat(buf,";");
      int ret = write(fd, buf, 200);   
      }
    }
    close(fd);

  }}
END_FUNCTION_BLOCK

FUNCTION_BLOCK JOGJOINTSELECTION
  VAR_INPUT
    JOINT1_F : BOOL := False;
    JOINT1_R : BOOL := False;
    JOINT2_F : BOOL := False;
    JOINT2_R : BOOL := False;
    JOINT3_F : BOOL := False;
    JOINT3_R : BOOL := False;
    JOINT4_F : BOOL := False;
    JOINT4_R : BOOL := False;
    JOINT5_F : BOOL := False;
    JOINT5_R : BOOL := False;
    JOINT6_F : BOOL := False;
    JOINT6_R : BOOL := False;
    IN_SPEED : REAL := 0.5;
  END_VAR
  VAR_OUTPUT
    INDEX : SINT := 0;
    OUT_SPEED : REAL := 0.0;
  END_VAR

  {{
    int count = 0;
    int joint = 0;
    bool forward = true;
    
    if(GetFbVar(JOINT1_F)){
      count++;
      joint = 1;
      forward = true;
    }
    if(GetFbVar(JOINT1_R)){
      count++;
      joint = 1;
      forward = false;
    }
    if(GetFbVar(JOINT2_F)){
      count++;
      joint = 2;
      forward = true;
    }
    if(GetFbVar(JOINT2_R)){
      count++;
      joint = 2;
      forward = false;
    }
    if(GetFbVar(JOINT3_F)){
      count++;
      joint = 3;
      forward = true;
    }
    if(GetFbVar(JOINT3_R)){
      count++;
      joint = 3;
      forward = false;
    }
    if(GetFbVar(JOINT4_F)){
      count++;
      joint = 4;
      forward = true;
    }
    if(GetFbVar(JOINT4_R)){
      count++;
      joint = 4;
      forward = false;
    }
    if(GetFbVar(JOINT5_F)){
      count++;
      joint = 5;
      forward = true;
    }
    if(GetFbVar(JOINT5_R)){
      count++;
      joint = 5;
      forward = false;
    }
    if(GetFbVar(JOINT6_F)){
      count++;
      joint = 6;
      forward = true;
    }
    if(GetFbVar(JOINT6_R)){
      count++;
      joint = 6;
      forward = false;
    }
    if(count == 1){
      SetFbVar(INDEX, joint);
      if(forward){
        SetFbVar(OUT_SPEED, GetFbVar(IN_SPEED));
      }
      else{
        SetFbVar(OUT_SPEED, 0 - GetFbVar(IN_SPEED));
      }
    }
    else{
      SetFbVar(INDEX, 0);
      SetFbVar(OUT_SPEED, 0);
    }
  }}
END_FUNCTION_BLOCK

FUNCTION_BLOCK JOGTYPESELECTION
  VAR_INPUT
    X_F : BOOL := False;
    X_R : BOOL := False;
    Y_F : BOOL := False;
    Y_R : BOOL := False;
    Z_F : BOOL := False;
    Z_R : BOOL := False;
    IN_SPEED : REAL := 0.5;
  END_VAR
  VAR_OUTPUT
    JOGTYPE : SINT := 0;
    OUT_SPEED : REAL := 0.0;
  END_VAR

  {{
    int count = 0;
    int JOGTYPE = 0;
    bool forward = true;
    
    if(GetFbVar(X_F)){
      count++;
      JOGTYPE = 1;
      forward = true;
    }
    if(GetFbVar(X_R)){
      count++;
      JOGTYPE = 1;
      forward = false;
    }
    if(GetFbVar(Y_F)){
      count++;
      JOGTYPE = 2;
      forward = true;
    }
    if(GetFbVar(Y_R)){
      count++;
      JOGTYPE = 2;
      forward = false;
    }
    if(GetFbVar(Z_F)){
      count++;
      JOGTYPE = 3;
      forward = true;
    }
    if(GetFbVar(Z_R)){
      count++;
      JOGTYPE = 3;
      forward = false;
    }
    if(count == 1){
      SetFbVar(JOGTYPE, JOGTYPE);
      if(forward){
        SetFbVar(OUT_SPEED, GetFbVar(IN_SPEED));
      }
      else{
        SetFbVar(OUT_SPEED, 0 - GetFbVar(IN_SPEED));
      }
    }
    else{
      SetFbVar(JOGTYPE, 0);
      SetFbVar(OUT_SPEED, 0);
    }
  }}
END_FUNCTION_BLOCK

FUNCTION_BLOCK SPEEDADJUST
  VAR_INPUT
    ACC : BOOL := False;
    DEC : BOOL := False;
  END_VAR
  VAR_OUTPUT
    SPEED : REAL := 0.5;
  END_VAR

  {{
    bool acc = GetFbVar(ACC);
    bool dec = GetFbVar(DEC);
    float speed = GetFbVar(SPEED);

    if(acc && !dec){
      if(speed > 0.99){
        speed = 1.0;
      }
      else{
        speed += 0.01;
      }
    }
    else if(!acc && dec){
      if(speed < 0.01){
        speed = 0;
      }
      else{
        speed -= 0.01;
      }
    }
    SetFbVar(SPEED, speed);
  }}
END_FUNCTION_BLOCK